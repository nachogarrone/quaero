package com.ucu.teoria.dos.quaero.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import com.ucu.teoria.dos.quaero.ast.*;

parser code {:


	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
	    System.out.println(input);
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}
:}

// Rules
terminal LPAREN;
terminal RPAREN;
terminal COLON;
terminal COMMA;
terminal NUM;
terminal String TAG;
terminal String STR;
terminal TRUE;
terminal FALSE;
terminal COMILLA;

//Operadores
terminal Exp ROOT;
terminal Exp ELEMENTS;
terminal Exp RE;
terminal Exp POINT;
terminal Exp INTERSEC;
terminal Exp UNION;
terminal Exp CONCAT;
terminal Exp DIFERENCIA;

non terminal NodeQ node;
non terminal Object root;
non terminal Object value;
non terminal NodeQ elems;

non terminal Exp consulta;

precedence left ROOT;
precedence left ELEMENTS;
precedence left RE;
precedence left POINT;
precedence left INTERSEC;
precedence left UNION;
precedence left CONCAT;
precedence left DIFERENCIA;

start with root;

root      ::= node:n
           {: RESULT = n; :}
           | value:v
           {: RESULT = v; :}
;

node      ::= TAG:tag LPAREN elems:es RPAREN
           {: RESULT = es; es.tag=tag.toString(); :}
;

elems     ::= root:v
           {: RESULT = new NodeQ(); RESULT.elements.add(v); :}
           | TAG:t COLON root:v
           {: RESULT = new NodeQ(); RESULT.attributes.put(t.toString(),v); :}
           | elems:e COMMA TAG:t COLON root:v
           {: RESULT = e; e.attributes.put(t.toString(),v); :}
           | elems:e COMMA root:v
           {: RESULT = e; e.elements.add(v); :}
;


consulta 	::= consulta:c1 DIFERENCIA consulta:c2
           {: RESULT = new QDifference(c1,c2); :}
           |
           consulta:c1 CONCAT consulta:c2
           {: RESULT = new QConcat(c1,c2); :}
           |
           consulta:c1 UNION consulta:c2
           {: RESULT = new QUnion(c1,c2); :}
		   |
		   consulta:c1 INTERSEC consulta:c2
           {: RESULT = new QIntersec(c1,c2); :}
           |
           consulta:c1 POINT
           {: RESULT = new QPoint(c1); :}
           |
           consulta:c1 RE STR:s
           {: RESULT = new QFilter(c1, s); :}
           |
           consulta:c1 COMILLA TAG:t1 COMILLA
           {: RESULT = new QTag(c1,t1); :}
           |
           consulta:c1 TAG:t1
           {: RESULT = new QTag(c1,t1); :}
           |
           consulta:c1 ELEMENTS
           {: RESULT = new QElements(c1); :}
           |
           ROOT
           {: RESULT = new QRoot(); :}
           |
           LPAREN consulta:c1 RPAREN
           {: RESULT = c1; :}
;

value     ::=
          consulta:c
          {: RESULT = c; :}
          | STR:s
          {: RESULT = s.toString(); :}
          | NUM:n
          {: RESULT = Double.parseDouble(n.toString()); :}
          | TRUE
          {: RESULT = true; :}
          | FALSE
          {: RESULT = false; :}
;