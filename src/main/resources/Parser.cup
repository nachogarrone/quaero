package com.ucu.teoria.dos.quaero.parser;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import com.ucu.teoria.dos.quaero.ast.*;

parser code {:


	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}
:}

// Rules

terminal LPAREN;
terminal RPAREN;
terminal COLON;
terminal COMMA;
terminal NUM;
terminal TAG;
terminal STR;
terminal TRUE;
terminal FALSE;

non terminal NodeQ node;
non terminal Object value;
non terminal NodeQ elems;

start with value;

node      ::= TAG:tag LPAREN elems:es RPAREN
           {: RESULT = es; es.tag=tag.toString(); :}
;

elems     ::= TAG:t COLON value:v
           {: RESULT = new NodeQ(); RESULT.attributes.put(t.toString(),v); :}
           | elems:e COMMA TAG:t COLON value:v
           {: RESULT = e; e.attributes.put(t.toString(),v); :}
           | elems:e COMMA value:v
           {: RESULT = e; e.elements.add(v); :}
;

value     ::= STR:s | TAG:s
          {: RESULT = s.toString(); :}
          | NUM:n
          {: RESULT = Double.parseDouble(n.toString()); :}
          | TRUE
          {: RESULT = true; :}
          | FALSE
          {: RESULT = false; :}
          | node:n
          {: RESULT = n; :}
;